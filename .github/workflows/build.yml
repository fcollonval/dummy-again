name: Build

on:
  push:
    branches: main
  pull_request:
    branches: '*'

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9']

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Base Setup
      uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1

    - name: Install dependencies
      run: python -m pip install -U jupyterlab~=3.1 check-manifest

    - name: Lint the extension
      run: |
        set -eux
        jlpm
        jlpm run eslint:check
    
    - name: Test the extension
      run: |
        set -eux
        jlpm run test

    - name: Build the extension
      run: |
        set -eux
        python -m pip install .[test]

        pytest -vv -r ap --cov myextension
        jupyter server extension list
        jupyter server extension list 2>&1 | grep -ie "myextension.*OK"

        jupyter labextension list
        jupyter labextension list 2>&1 | grep -ie "myextension.*OK"
        python -m jupyterlab.browser_check

    - name: Package the extension
      run: |
        set -eux
        check-manifest -v

        pip install build
        python -m build
        cp dist/*.tar.gz myextension.tar.gz
        cp dist/*.tar.gz myextension.tar.gz
        pip uninstall -y "myextension" jupyterlab
        rm -rf myextension

    - uses: actions/upload-artifact@v2
      if: matrix.python-version == '3.9'
      with:
        name: extension-artifacts
        path: dist/myextension*
        if-no-files-found: error

  test_isolated:
    needs: build
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Install Python
      uses: actions/setup-python@v2
      with:
        # Ensure the python version matches the one in build
        python-version: '3.9'
        architecture: 'x64'
    - uses: actions/download-artifact@v2
      with:
        name: extension-artifacts
    - name: Install and Test
      run: |
        set -eux
        # Remove NodeJS, twice to take care of system and locally installed node versions.
        sudo rm -rf $(which node)
        sudo rm -rf $(which node)
        pip install ./myextension*.tar.gz
        pip install jupyterlab

        jupyter server extension list
        jupyter server extension list 2>&1 | grep -ie "myextension.*OK"

        jupyter labextension list
        jupyter labextension list 2>&1 | grep -ie "myextension.*OK"
        python -m jupyterlab.browser_check --no-chrome-test

  integration-tests:
    name: Integration tests
    needs: build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # Ensure the python version matches the one in build
        python-version: ['3.9']

    steps:
    - name: Checkout
      uses: actions/checkout@v2

    - name: Base Setup
      uses: jupyterlab/maintainer-tools/.github/actions/base-setup@v1

    - uses: actions/download-artifact@v2
      with:
        name: extension-artifacts

    - name: Install the extension
      run: |
        set -eux
        python -m pip install jupyterlab~=3.1 ./myextension*.whl

    - name: Launch JupyterLab
      working-directory: ui-tests
      run: |
        (jupyter lab --config jupyter_server_test_config.py > /tmp/jupyterlab_server.log 2>&1) &

    - name: Install browser
      working-directory: ui-tests
      run: |
        jlpm install
        jlpm playwright install chromium

    - name: Wait for JupyterLab
      uses: ifaxity/wait-on-action@v1
      with:
        resource: http-get://localhost:8888/lab
        timeout: 360000

    - name: Execute integration tests
      working-directory: ui-tests
      run: |
        jlpm run playwright test

    - name: Upload Playwright Test assets
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: myextension-playwright-test-assets
        path: |
          ui-tests/test-results

    - name: Upload Playwright Test report
      if: always()
      uses: actions/upload-artifact@v2
      with:
        name: myextension-playwright-report
        path: |
          ui-tests/playwright-report

    - name: Stop JupyterLab
      if: always()
      run: |
        kill -s SIGTERM $(pgrep jupyter-lab)

    - name: Print JupyterLab logs
      if: always()
      run: |
        cat /tmp/jupyterlab_server.log
